

TO DO:
	Multiplayer:
		divide code sections: server side and client side
		internet connection:
			TCP - initialization, events, lossless informations
			UDP - streaming entities transofrmation, movement and animation informations in realtime
	Mesh class resource (combination of graphical model and it's LOD, collision shape); possibly replacement for SceneNode
	Add TryBox and TryCylinder to ObjToShapeConverter
	Optimize crouching/standing up in MotionController
	Optimise setting transformation to ISceneNode in SceneNode code
	Optimise loading  and creating Entities
	Optimise btCollisionShape and CollisionShape - make a map inside CollisionShape: (scale) -> btCollisionShape
		- add CollisionShape::GetNewBtCollisionShape(scale); // not necessery uniqe, get by scale
		- add CollisionShape::SetScale(btCollisionShape, newScale); // if current btCollisionShape is unique, change it's scale; else if it's not unique, call CollisionShape::GetNewBtCollisionShape(newScale);
	Lights
	Particles
	LOD system
	Font resource class
	Sprites in world space
	Map loading system from JSON
	Saving and loading Entities, SceneNodes from JSON
	Code refactor
	Add video player (maybe from *.png image sequence and *.ogg sound file)
	

TO DO (?):
	Code refactor - Remove "this->" where possible
	Code refactor - Replace "std::shared_ptr<Entity>" with "Entity*"
	Code refactor - Initiate Entities and other classes only in constructor; destroy Entities and other classes only in destructor
	

Done:
	Makefile (and binaries?) for linux
	Using compressed files
	Decoding ogg sound files
	Entity-derived classes and other class reorganisation, move from game\* to engine\*:
		StaticEntity
		DynamicEntity
		Trigger
		CharacterWalkTrigger -> MotionControllerTrigger
		MotionController
	Multiple Entity-derived classes in one module
	Sounds
	Animations
	Loading archives from irrlicht file system
	enable window resizing with fov and aspect correction
	ResourceManager - garbage collecor
	Model class resource, integrate it with ResourceManager
	Better ray tracing
	Sound (previously SoundSampler) as resource and integrate it with ResourceManager
	Material resource class
	Configurations in json files
	Rewrite collision shape and collision shape constructor (combine them into one class) - make CollisionShape resource; remove CollisionShapeManager and use ResourceManager instead
	Texture resource class, and use it while loading material
	FileSystem class and IFile and OFile class for unified file access
	High resolution clock for frame delta time
	Limit frame rate
	Menu system
	

TO DO in future:
	MotionController steps on staircase or low objects
	NavMesh
	Light maps
	Dynamic light maps
	Sound occlusion
	Mesh occlusion
	Optimise rendering?
	Limit number of active OpenAL sound sources
	

Bugs:
	When entering low-roofed place with very short crouch-key press then character behaves like standing still
	Executable once locked whole system (needed to cut power to do anything) (in v0.3.1a)
	Sometimes undefined coordinates while starting game (randomly) (didn't met since v0.4.1)
	Very unstable fps (since v0.4.0)
	When starting MainMenu at beginig, simulation is not paused
	

Removed bugs:
	Removing entity does not remove a ISceneNode
	When resource manager removes a Resource -> destructor is not called
	

To test:
	

Done tests:
	ResourceManager garbage collector
	JSON wrapper
	
